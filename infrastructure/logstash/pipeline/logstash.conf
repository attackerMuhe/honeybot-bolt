input {
  beats {
    port => 5044
  }
}

filter {
  # Add processing timestamp
  mutate {
    add_field => { "processing_timestamp" => "%{@timestamp}" }
  }

  # Process Cowrie logs
  if "cowrie" in [tags] {
    # Parse JSON if not already parsed
    if [message] {
      json {
        source => "message"
        remove_field => ["message"]
      }
    }

    # Normalize timestamp field
    if [timestamp] {
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
    }

    # Extract and enrich source IP information
    if [src_ip] {
      # GeoIP enrichment
      geoip {
        source => "src_ip"
        target => "geoip"
      }

      # DNS reverse lookup
      dns {
        reverse => [ "src_ip" ]
        action => "replace"
        nameserver => ["8.8.8.8", "1.1.1.1"]
      }
    }

    # Detect malicious commands and activities
    if [input] or [message] {
      mutate {
        lowercase => [ "input" ]
      }

      # Check for malicious command patterns
      if [input] =~ /(wget|curl|chmod|bash|sudo|rm -rf|\/bin\/sh|python|perl|nc |netcat)/ {
        mutate {
          add_field => { "threat_triggered" => "malicious_command_execution" }
          add_field => { "threat_level" => "high" }
          add_field => { "threat_category" => "command_injection" }
        }
      }

      # Check for download attempts
      if [input] =~ /(wget|curl|fetch).*http/ {
        mutate {
          add_field => { "threat_triggered" => "download_attempt" }
          add_field => { "threat_level" => "critical" }
          add_field => { "threat_category" => "malware_download" }
        }
      }

      # Check for privilege escalation
      if [input] =~ /(sudo|su |chmod \+x)/ {
        mutate {
          add_field => { "threat_triggered" => "privilege_escalation" }
          add_field => { "threat_level" => "high" }
          add_field => { "threat_category" => "privilege_escalation" }
        }
      }
    }

    # Check for authentication attempts
    if [eventid] == "cowrie.login.success" or [eventid] == "cowrie.login.failed" {
      mutate {
        add_field => { "threat_triggered" => "authentication_attempt" }
        add_field => { "threat_level" => "medium" }
        add_field => { "threat_category" => "brute_force" }
      }
    }

    # Extract credentials for analysis
    if [username] and [password] {
      mutate {
        add_field => { "credential_pair" => "%{username}:%{password}" }
      }
    }
  }

  # Process Dionaea logs
  if "dionaea" in [tags] {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{WORD:log_level} - %{GREEDYDATA:log_message}" }
    }

    if [timestamp] {
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
    }

    # Extract IP addresses from log messages
    if [log_message] =~ /\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/ {
      grok {
        match => { "log_message" => "%{IP:src_ip}" }
      }

      if [src_ip] {
        geoip {
          source => "src_ip"
          target => "geoip"
        }

        dns {
          reverse => [ "src_ip" ]
          action => "replace"
          nameserver => ["8.8.8.8", "1.1.1.1"]
        }

        mutate {
          add_field => { "threat_triggered" => "network_probe" }
          add_field => { "threat_level" => "medium" }
          add_field => { "threat_category" => "reconnaissance" }
        }
      }
    }
  }

  # Process Redis honeypot logs
  if "redis" in [tags] {
    if [message] {
      json {
        source => "message"
        remove_field => ["message"]
      }
    }

    # Drop Redis health check logs from localhost
    if [src_ip] == "127.0.0.1" and [action] == "connection_accepted" {
      drop { }
    }

    if [src_ip] {
      geoip {
        source => "src_ip"
        target => "geoip"
      }

      dns {
        reverse => [ "src_ip" ]
        action => "replace"
        nameserver => ["8.8.8.8", "1.1.1.1"]
      }
    }

    # Detect malicious Redis commands
    if [command] {
      mutate {
        lowercase => [ "command" ]
      }

      if [command] =~ /(flushall|flushdb|config|eval|script|shutdown)/ {
        mutate {
          add_field => { "threat_triggered" => "malicious_database_command" }
          add_field => { "threat_level" => "high" }
          add_field => { "threat_category" => "database_attack" }
        }
      }
    }
  }

  # Process SNMP honeypot logs
  if "snmp" in [tags] {
    if [message] {
      json {
        source => "message"
        remove_field => ["message"]
      }
    }

    if [src_ip] {
      geoip {
        source => "src_ip"
        target => "geoip"
      }

      dns {
        reverse => [ "src_ip" ]
        action => "replace"
        nameserver => ["8.8.8.8", "1.1.1.1"]
      }

      mutate {
        add_field => { "threat_triggered" => "snmp_enumeration" }
        add_field => { "threat_level" => "medium" }
        add_field => { "threat_category" => "reconnaissance" }
      }
    }
  }

  # Clean up noisy or unnecessary fields
  mutate {
    remove_field => [ "host", "agent", "ecs", "log", "@version", "fields" ]
  }

  # Add index routing field
  if [threat_triggered] {
    mutate {
      add_field => { "[@metadata][index]" => "honeypot-iocs" }
    }
  } else {
    mutate {
      add_field => { "[@metadata][index]" => "honeypot-logs" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index]}-%{+YYYY.MM.dd}"
  }

  # Debug output (uncomment for troubleshooting)
  # stdout { codec => rubydebug }
}